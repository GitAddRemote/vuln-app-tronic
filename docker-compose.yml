# docker-compose.yml (Compose v2: no version key)

networks:
  labnet:
    driver: bridge
    ipam:
      config:
        - subnet: ${LAB_SUBNET:-172.30.0.0/16}

services:
  # --- Web basics (classic PHP stacks) ---
  dvwa:
    image: vulnerables/web-dvwa
    container_name: dvwa
    profiles: ["web-basics"]
    networks: [labnet]
    ports: ["127.0.0.1:${DVWA_PORT}:80"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  bwapp:
    image: raesene/bwapp
    container_name: bwapp
    profiles: ["web-basics"]
    networks: [labnet]
    ports: ["127.0.0.1:${BWAPP_PORT}:80"]
    restart: unless-stopped
    # Auto-install via mounted settings.php and DB init job
    depends_on:
      dvws-db:
        condition: service_healthy
      bwapp-db-init:
        condition: service_completed_successfully
    volumes:
      # This file must exist in your repo; it overrides the installer-written config
      - ./docker/bwapp/settings.php:/var/www/html/admin/settings.php:ro
    healthcheck:
      # Either portal.php or login.php work; keeping your original path
      test: ["CMD", "curl", "-fsS", "http://localhost/portal.php"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  # One-shot, idempotent DB initializer for bWAPP (non-destructive)
  bwapp-db-init:
    image: mysql:5.7
    container_name: bwapp-db-init
    profiles: ["web-basics"]
    depends_on:
      dvws-db:
        condition: service_healthy
    networks: [labnet]
    volumes:
      - ./docker/mysql/ensure-bwapp.sql:/init/ensure.sql:ro
    entrypoint:
      - sh
      - -lc
      - >
        mysql -hdvws-db -uroot -pmysecretpassword < /init/ensure.sql
    restart: "no"

  mutillidae:
    image: citizenstig/nowasp
    container_name: mutillidae
    profiles: ["web-basics"]
    networks: [labnet]
    ports: ["127.0.0.1:${MUTILLIDAE_PORT}:80"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  # --- Modern SPA/API targets ---
  juice-shop:
    image: bkimminich/juice-shop
    container_name: juice-shop
    profiles: ["modern-api"]
    networks: [labnet]
    ports: ["127.0.0.1:${JUICESHOP_PORT}:3000"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  mongodb:
    image: mongo:6
    container_name: vampi-mongo
    profiles: ["modern-api", "api-only"]
    networks: [labnet]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  vampi:
    image: erev0s/vampi
    container_name: vampi
    profiles: ["modern-api", "api-only"]
    networks: [labnet]
    ports: ["127.0.0.1:${VAMPI_PORT}:5000"]
    environment:
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=vampi
    depends_on:
      - mongodb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:5000/"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  # --- API-only extras ---
  dvws-db:
    image: mysql:5.7
    container_name: dvws-db
    # Make MySQL available to both api-only and web-basics profiles
    profiles: ["api-only", "web-basics"]
    networks: [labnet]
    environment:
      - MYSQL_ROOT_PASSWORD=mysecretpassword     # self-contained: hard-coded for local lab
      - MYSQL_DATABASE=dvws_sqldb               # created on first run if volume is empty
      - MYSQL_ROOT_HOST=%                       # allow root from network
    command: ["mysqld",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci"
    ]
    volumes:
      # Keeps your existing init scripts convention
      - ./docker/mysql:/docker-entrypoint-initdb.d
      - dvws-mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -pmysecretpassword --silent || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 90s
    restart: unless-stopped

  # One-shot, idempotent DB initializer for DVWS
  dvws-db-init:
    image: mysql:5.7
    container_name: dvws-db-init
    profiles: ["api-only"]
    depends_on:
      dvws-db:
        condition: service_healthy
    networks: [labnet]
    volumes:
      - ./docker/mysql/ensure-dvws.sql:/init/ensure.sql:ro
    entrypoint:
      - sh
      - -lc
      - >
        mysql -hdvws-db -uroot -pmysecretpassword < /init/ensure.sql
    restart: "no"

  dvws:
    # Uses dvws.Dockerfile with entrypoint that waits via nc and starts socat
    build:
      context: .
      dockerfile: dvws.Dockerfile
    image: vuln-tronic-labs-dvws
    container_name: dvws
    profiles: ["api-only"]
    networks: [labnet]
    ports: ["127.0.0.1:${DVWS_PORT:-8888}:80"]
    depends_on:
      dvws-db-init:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  dvga:
    image: dolevf/dvga
    container_name: dvga
    profiles: ["api-only"]
    networks: [labnet]
    # Host port stays configurable, container port fixed to 5013
    ports: ["127.0.0.1:${DVGA_PORT:-5013}:5013"]
    environment:
      - WEB_HOST=0.0.0.0
      - WEB_PORT=5013
      - JWT_SECRET=secret
      - HMAC_SECRET=secret
      - FLAG=flag{graph_ql_is_fun}
    restart: unless-stopped
    healthcheck:
      # simple introspection query on the correct port
      test: ["CMD-SHELL", "curl -fsS -X POST http://localhost:5013/graphql -H 'content-type: application/json' -d '{\"query\":\"{__typename}\"}' >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
      
  # --- Optional legacy/ecommerce target ---
  hackazon:
    image: pierrickv/hackazon
    container_name: hackazon
    profiles: ["extras"]
    networks: [labnet]
    ports: ["127.0.0.1:${HACKAZON_PORT}:80"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

volumes:
  dvws-mysql: {}

